using System;
using System.IO;
using System.Linq;
using Microsoft.EntityFrameworkCore.Scaffolding;
using StrongHeart.EfCore.DesignTimeServices.Scaffold.Roslyn;
using StrongHeart.EfCore.DesignTimeServices.Scaffold.StoredProcScaffolder;

namespace StrongHeart.EfCore.DesignTimeServices.Scaffold.CustomGenerators;

/// <summary>
/// This class helps with splitting the various scaffolded files into parts which can be located in correct directories.
/// A part is a group of files: eg. WriteModel-files
/// </summary>
internal class PartHelper
{
    private readonly ScaffoldedModel _scaffoldedModel;
    private readonly string _outputDir;
    private readonly string _rootNameSpace;
    private readonly string _contextName;

    public PartHelper(ScaffoldedModel scaffoldedModel, string outputDir, string rootNameSpace, string contextName)
    {
        _scaffoldedModel = scaffoldedModel;
        _outputDir = outputDir;
        _rootNameSpace = rootNameSpace;
        _contextName = contextName;
    }

    public (ScaffoldedModel scaffoldedModel, string outputDir) GetWriteModelPart()
    {
        ScaffoldedModel sm = new ScaffoldedModel();
        sm.ContextFile = GetEmptyFile();
        foreach (ScaffoldedFile file in _scaffoldedModel.AdditionalFiles
                     .Where(x => !x.Path.StartsWith(ScaffoldFileNamePrefixConstants.StoredProcedure, StringComparison.CurrentCulture))
                     .Where(x => !x.Path.StartsWith(ScaffoldFileNamePrefixConstants.ReadModels, StringComparison.CurrentCulture))
                     .Where(x => !x.Path.StartsWith(ScaffoldFileNamePrefixConstants.DbContextPartial, StringComparison.CurrentCulture))
                     .Where(x => !x.Path.StartsWith($"{_contextName}.", StringComparison.CurrentCulture)
                     ))
        {
            file.Code = AdjustNamespaceRewriter.ApplyToCode(file.Code, _rootNameSpace, ScaffoldSubFolderNameConstants.WriteModels);
            file.Code = MakeClassInternalRewriter.ApplyToCode(file.Code);
            sm.AdditionalFiles.Add(file);
            //no need to replace file name as this is generated by entity framework core
        }

        return (sm, Path.Combine(_outputDir, ScaffoldSubFolderNameConstants.WriteModels));
    }

    public (ScaffoldedModel scaffoldedModel, string outputDir) GetContextPart()
    {
        ScaffoldedModel sm = new ScaffoldedModel();
        string codeRewrite1 = AdjustNamespaceRewriter.ApplyToCode(_scaffoldedModel.ContextFile.Code, _rootNameSpace, ScaffoldSubFolderNameConstants.Context);
        string codeRewrite2 = AddUsingRewriter.ApplyToCode(codeRewrite1, $"{_rootNameSpace}.WriteModels");
        string codeRewrite3 = MakeClassInternalRewriter.ApplyToCode(codeRewrite2);
        sm.ContextFile = new ScaffoldedFile()
        {
            Path = _scaffoldedModel.ContextFile.Path.Replace(_outputDir, Path.Combine(_outputDir, ScaffoldSubFolderNameConstants.Context), StringComparison.CurrentCulture),
            Code = codeRewrite3
        };
        foreach (ScaffoldedFile file in _scaffoldedModel.AdditionalFiles.Where(x => x.Path.StartsWith(ScaffoldFileNamePrefixConstants.DbContextPartial, StringComparison.CurrentCulture) || x.Path.StartsWith(_contextName, StringComparison.CurrentCulture)))
        {
            file.Code = AdjustNamespaceRewriter.ApplyToCode(file.Code, _rootNameSpace, ScaffoldSubFolderNameConstants.Context);
            file.Code = MakeClassInternalRewriter.ApplyToCode(file.Code);
            sm.AdditionalFiles.Add(file);
            file.Path = file.Path.Replace(ScaffoldFileNamePrefixConstants.DbContextPartial, string.Empty, StringComparison.CurrentCulture);
        }

        return (sm, Path.Combine(_outputDir, ScaffoldSubFolderNameConstants.Context));
    }

    public (ScaffoldedModel scaffoldedModel, string outputDir) GetReadModelPart()
    {
        ScaffoldedModel sm = new ScaffoldedModel();
        sm.ContextFile = GetEmptyFile();
        foreach (ScaffoldedFile file in _scaffoldedModel.AdditionalFiles.Where(x => x.Path.StartsWith(ScaffoldFileNamePrefixConstants.ReadModels, StringComparison.CurrentCulture)))
        {
            //file.Code = AddUsingRewriter.ApplyToCode(file.Code, typeof(IReadModel).Namespace);
            file.Code = AdjustNamespaceRewriter.ApplyToCode(file.Code, _rootNameSpace, ScaffoldSubFolderNameConstants.ReadModels);
            file.Code = MakeClassInternalRewriter.ApplyToCode(file.Code);
            sm.AdditionalFiles.Add(file);
            file.Path = file.Path.Replace(ScaffoldFileNamePrefixConstants.ReadModels, string.Empty, StringComparison.CurrentCulture);
        }

        return (sm, Path.Combine(_outputDir, ScaffoldSubFolderNameConstants.ReadModels));
    }

    public (ScaffoldedModel scaffoldedModel, string outputDir) GetStoredProcedurePart()
    {
        ScaffoldedModel sm = new ScaffoldedModel();
        sm.ContextFile = GetEmptyFile();
        foreach (ScaffoldedFile file in _scaffoldedModel.AdditionalFiles.Where(x => x.Path.StartsWith(ScaffoldFileNamePrefixConstants.StoredProcedure, StringComparison.CurrentCulture)))
        {
            file.Code = AdjustNamespaceRewriter.ApplyToCode(file.Code, _rootNameSpace, ScaffoldSubFolderNameConstants.StoredProcedure);
            file.Code = MakeClassInternalRewriter.ApplyToCode(file.Code);
            sm.AdditionalFiles.Add(file);
            file.Path = file.Path.Replace(ScaffoldFileNamePrefixConstants.StoredProcedure, string.Empty, StringComparison.CurrentCulture);
        }

        return (sm, Path.Combine(_outputDir, ScaffoldSubFolderNameConstants.StoredProcedure));
    }

    private static ScaffoldedFile GetEmptyFile()
    {
        return new ScaffoldedFile()
        {
            Code = @"/*
Because of the architecture of the Ef.Core shaffolder this empty file must be generated in order to simulate a dbcontext file. 

You can delete me - but I will be generated again on next Scaffold-DbContext :-)
*/",
            Path = "Empty.generated.cs"
        };
    }
}