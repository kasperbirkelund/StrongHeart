using System.CodeDom.Compiler;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace StrongHeart.EfCore.DesignTimeServices.Scaffold
{
    internal class AddAutoGeneratedClassMarkerRewriter : CSharpSyntaxRewriter
    {
        private static string? version = typeof(AddAutoGeneratedClassMarkerRewriter).Assembly.GetName().Version.ToString();
        public static string ApplyToCode(string fileContentAsCSharp)
        {
            CSharpSyntaxTree tree = (CSharpSyntaxTree)CSharpSyntaxTree.ParseText(fileContentAsCSharp);
            var root = (CompilationUnitSyntax)tree.GetRoot();
            var rewriter = new AddAutoGeneratedClassMarkerRewriter();
            SyntaxNode newSource = rewriter.Visit(root);
            return newSource.ToString();
        }

        public override SyntaxNode? VisitClassDeclaration(ClassDeclarationSyntax node)
        {
            SyntaxTrivia whitespace = node.GetLeadingTrivia().LastOrDefault(x => x.Kind() == SyntaxKind.WhitespaceTrivia);

            NameSyntax name = SyntaxFactory.ParseName(typeof(GeneratedCodeAttribute).FullName);
            AttributeArgumentListSyntax arguments = SyntaxFactory.ParseAttributeArgumentList($"(\"{nameof(AddAutoGeneratedClassMarkerRewriter)}\", \"{version}\")");
            AttributeSyntax attribute = SyntaxFactory.Attribute(name, arguments);
            AttributeListSyntax attributeList = SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(attribute)).WithTrailingTrivia(SyntaxFactory.CarriageReturnLineFeed);

            //Add GeneratedCodeAttribute and a custom comment
            ClassDeclarationSyntax newClassNode = node
                .AddAttributeLists(attributeList)
                .WithLeadingTrivia(GetComment(whitespace));

            return newClassNode;
        }

        private static SyntaxTrivia GetComment(SyntaxTrivia whitespace)
        {
            string doc =
                $@"{whitespace}/// <summary>
{whitespace}/// This code is autogenerated by a STAR tool and should not contain any handwritten code.
{whitespace}/// </summary>
{whitespace}";
            return SyntaxFactory.Comment(doc);
        }
    }
}