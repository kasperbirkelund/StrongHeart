using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using StrongHeart.DempApp.EfCoreConsole.DataModels.WriteModels;
namespace StrongHeart.DempApp.EfCoreConsole.DataModels.Context{
    /// <summary>
    /// This code is autogenerated by StrongHeart framework and should not contain any handwritten code. 
    /// Dive into this type to change the code generator: 'StrongHeart.EfCore.DesignTimeServices.Scaffold.CustomGenerators.StrongHeartReverseEngineerScaffolder'
    /// </summary>
    internal partial class MyDemoContext : DbContext
    {
        public MyDemoContext()
        {
        }

        public MyDemoContext(DbContextOptions<MyDemoContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DemoTable> DemoTables { get; set; } = null!;
        public virtual DbSet<DemoView> DemoViews { get; set; } = null!;
        public virtual DbSet<VersionInfo> VersionInfos { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DemoView>(entity =>
            {
                entity.ToView("DemoView");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VersionInfo>(entity =>
            {
                entity.HasIndex(e => e.Version, "UC_Version")
                    .IsUnique()
                    .IsClustered();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
